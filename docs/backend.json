{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user (either a Rider or Driver) in the Cabzi application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "userType": {
          "type": "string",
          "description": "The type of user: 'Rider' or 'Driver'."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number, used for OTP login.",
          "format": "string"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userType",
        "phoneNumber",
        "createdAt"
      ]
    },
    "Rider": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Rider",
      "type": "object",
      "description": "Represents a rider in the Cabzi application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Rider entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Rider)"
        },
        "name": {
          "type": "string",
          "description": "Rider's name."
        },
        "email": {
          "type": "string",
          "description": "Rider's email address.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "userId",
        "name"
      ]
    },
    "Driver": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Driver",
      "type": "object",
      "description": "Represents a driver in the Cabzi application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Driver entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Driver)"
        },
        "licenseImageURL": {
          "type": "string",
          "description": "URL of the driver's license image."
        },
        "aadhaarImageURL": {
          "type": "string",
          "description": "URL of the driver's Aadhaar image."
        },
        "vehicleRCImageURL": {
          "type": "string",
          "description": "URL of the driver's vehicle registration certificate image."
        },
        "vehicleType": {
          "type": "string",
          "description": "The type of vehicle the driver uses (e.g., Bike, Auto, Cab, Toto)."
        },
        "subscriptionId": {
          "type": "string",
          "description": "Reference to Subscription. (Relationship: Subscription 1:1 Driver)"
        },
        "insuranceStatus": {
          "type": "string",
          "description": "Status of the driver's insurance (Active, Pending)."
        }
      },
      "required": [
        "id",
        "userId",
        "vehicleType",
        "subscriptionId",
        "insuranceStatus"
      ]
    },
    "Ride": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ride",
      "type": "object",
      "description": "Represents a ride request and its details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Ride entity."
        },
        "riderId": {
          "type": "string",
          "description": "Reference to Rider. (Relationship: Rider 1:N Ride)"
        },
        "driverId": {
          "type": "string",
          "description": "Reference to Driver. (Relationship: Driver 1:N Ride).  Null if ride is not yet accepted."
        },
        "pickupLocation": {
          "type": "string",
          "description": "Pickup location (e.g., as a string)."
        },
        "dropLocation": {
          "type": "string",
          "description": "Drop location (e.g., as a string)."
        },
        "fareEstimate": {
          "type": "number",
          "description": "Estimated fare for the ride."
        },
        "status": {
          "type": "string",
          "description": "Status of the ride (e.g., Requested, Accepted, Started, Completed, Cancelled)."
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method used for the ride (Cash, UPI, Wallet)."
        }
      },
      "required": [
        "id",
        "riderId",
        "pickupLocation",
        "dropLocation",
        "fareEstimate",
        "status",
        "paymentMethod"
      ]
    },
    "Subscription": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Subscription",
      "type": "object",
      "description": "Represents a subscription plan for drivers.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Subscription entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the subscription plan (e.g., Free, ₹1999, ₹2999, ₹4999)."
        },
        "price": {
          "type": "number",
          "description": "Price of the subscription plan."
        },
        "benefits": {
          "type": "string",
          "description": "Description of the benefits included in the subscription plan (Insurance, Garage, Support)."
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "benefits"
      ]
    },
    "WalletTransaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WalletTransaction",
      "type": "object",
      "description": "Represents a wallet transaction for a driver.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the WalletTransaction entity."
        },
        "driverId": {
          "type": "string",
          "description": "Reference to Driver. (Relationship: Driver 1:N WalletTransaction)"
        },
        "amount": {
          "type": "number",
          "description": "Amount of the transaction."
        },
        "type": {
          "type": "string",
          "description": "Type of transaction (e.g., Credit, Debit, Subscription Payment)."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the transaction.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "driverId",
        "amount",
        "type",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "user",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data.  This structure provides path based ownership of the user. Only the user can read/write to their own document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/rider",
        "definition": {
          "entityName": "rider",
          "schema": {
            "$ref": "#/backend/entities/Rider"
          },
          "description": "Stores rider profile data, linked to the user. Path-based ownership; only the user can access their own rider profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/driver",
        "definition": {
          "entityName": "driver",
          "schema": {
            "$ref": "#/backend/entities/Driver"
          },
          "description": "Stores driver profile data, linked to the user. Path-based ownership; only the user can access their own driver profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/rides/{rideId}",
        "definition": {
          "entityName": "ride",
          "schema": {
            "$ref": "#/backend/entities/Ride"
          },
          "description": "Stores ride data. Access control is managed via the riderId and driverId fields in the document.",
          "params": [
            {
              "name": "rideId",
              "description": "The unique identifier for the ride."
            }
          ]
        }
      },
      {
        "path": "/subscriptions/{subscriptionId}",
        "definition": {
          "entityName": "subscription",
          "schema": {
            "$ref": "#/backend/entities/Subscription"
          },
          "description": "Stores subscription plan data. Publicly readable; drivers subscribe through their driver profile.",
          "params": [
            {
              "name": "subscriptionId",
              "description": "The unique identifier for the subscription plan."
            }
          ]
        }
      },
      {
        "path": "/wallet_transactions/{transactionId}",
        "definition": {
          "entityName": "walletTransaction",
          "schema": {
            "$ref": "#/backend/entities/WalletTransaction"
          },
          "description": "Stores wallet transaction data for drivers. Access control is managed via the driverId field in the document.",
          "params": [
            {
              "name": "transactionId",
              "description": "The unique identifier for the wallet transaction."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to be secure, scalable, and easily debuggable, following the core design principles and strategy mandates. The structure prioritizes Authorization Independence by denormalizing authorization data where needed, enabling simpler and more robust security rules.  It avoids hierarchical authorization dependencies (`get()` calls) to maintain atomic operations and ease debugging.  Structural Segregation is applied by keeping data with different security postures in separate collections.  Access modeling utilizes path-based ownership for private data and membership maps for collaborative data. The structure enforces invariants related to ownership, timestamps, and denormalized data.\n\nSpecifically, authorization independence is achieved by avoiding `get()` calls in the rules.  User access to their own Rider or Driver documents is path-based, located under `/users/{userId}/rider` and `/users/{userId}/driver` respectively.  Ride access is controlled via the `riderId` field within the `/rides` collection, and the `driverId` fields, ensuring only associated users can access specific ride data. Subscription access is tied to the driver documents ensuring that a driver document is required to obtain a subscription.\n\nThe structure supports the required QAPs through segregation and the use of appropriate access models. Private user data (Rider and Driver profiles) is stored under `/users/{userId}`, allowing for secure list operations based on user ID.  The rides collection stores ride data and uses the `riderId` and `driverId` fields to support listing rides associated with a specific rider or driver. Subscription plans are publicly accessible for viewing but creating a subscription is linked to a specific driver id, preventing unauthorized modification or creation."
  }
}